<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context 
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc.xsd">

	<!-- 本配置文件是工名为mvc-dispatcher的DispatcherServlet使用， 提供其相关的Spring MVC配置 -->

	<!-- 启用Spring基于annotation的DI, 使用户可以在Spring MVC中使用Spring的强大功能。 激活 @Required 
		@Autowired,JSR 250's @PostConstruct, @PreDestroy and @Resource 等标注 -->
	<context:annotation-config />

	<!-- DispatcherServlet上下文， 只管理@Controller类型的bean， 忽略其他型的bean, 如@Service,service交给spring容器管理了 -->
	<context:component-scan base-package="com.controller">
		<context:include-filter type="annotation"
			expression="org.springframework.stereotype.Controller" />
	</context:component-scan>

	<!-- HandlerMapping, 无需配置， Spring MVC可以默认启动。 DefaultAnnotationHandlerMapping 
		annotation-driven HandlerMapping -->

	<!-- 扩充了注解驱动，可以将请求参数绑定到控制器参数 -->
	<mvc:annotation-driven/>

	<!-- 静态资源处理， css， js， imgs -->
	<mvc:resources mapping="/resources/**" location="/resource/" />

	<mvc:default-servlet-handler/>

	<!--配置拦截器, 多个拦截器,顺序执行 -->
	<mvc:interceptors>
	    <mvc:interceptor>
	        <!-- 匹配的是url路径， 如果不配置或/**,将拦截所有的Controller -->
	        <mvc:mapping path="/accountandpassword/**" />
			<!--加解密拦截器-->
	        <bean class="interceptor.EncryptInterceptor"/>
	    </mvc:interceptor>
	    <!-- 当设置多个拦截器时，先按顺序调用preHandle方法，然后逆序调用每个拦截器的postHandle和afterCompletion方法 -->
	</mvc:interceptors>

	<!-- StringHttpMessageConverter bean -->
	<bean id = "stringHttpMessageConverter" class = "org.springframework.http.converter.StringHttpMessageConverter"/>
	<bean id="formHttpMessageConverter" class="org.springframework.http.converter.FormHttpMessageConverter"/>
	 
	<!-- 启动Spring MVC的注解功能，完成请求和注解POJO的映射 -->
	<bean class ="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter" >
	       <property name= "messageConverters" >
	             <list>
	                 <ref bean= "formHttpMessageConverter" />
	                 <ref bean= "stringHttpMessageConverter" />
	             </list>
	        </property>
	</bean>

	<!-- 配置ViewResolver。 可以用多个ViewResolver。 使用order属性排序 order越小越优先，默认为最大的。 InternalResourceViewResolver放在最后。 -->
	<bean
			class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver">
		<property name="order" value="1" />
		<property name="mediaTypes">
			<map>
				<entry key="json" value="application/json" /><!--处理以.json结尾的请求-->
				<entry key="xml" value="application/xml" /><!--处理以.xml结尾的请求-->
				<entry key="htm" value="text/html" /><!--处理以.html结尾的请求-->
			</map>
		</property>

		<property name="defaultViews">
			<list>
				<!-- JSON View -->
				<bean class="org.springframework.web.servlet.view.json.MappingJackson2JsonView"/>
			</list>
		</property>
		<property name="ignoreAcceptHeader" value="true" />
	</bean>

	<bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="order" value="2" />
		<property name="viewClass"
			value="org.springframework.web.servlet.view.JstlView" />
		<property name="prefix" value="/WEB-INF/jsps/" />
		<property name="suffix" value=".jsp" />
	</bean>
</beans>